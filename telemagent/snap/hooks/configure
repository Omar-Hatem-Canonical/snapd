#!/usr/bin/env python3

import subprocess
import os


def _snapctl(action, setting):
    snapctl = subprocess.run(
        ["snapctl", action, setting],
        capture_output=True,
        text=True,
    )

    output = snapctl.stdout
    if action == "get" and output[-1] == '\n':
        output = output[:-1]

    return output

def set_defaults(config_var, config_val):
   if not config_var or config_var == "\n":
        return config_val
   else:
       return config_var


SNAP_COMMON = os.environ['SNAP_COMMON']
HOME_DIR = os.environ['HOME']
ENV_FILE=f"{SNAP_COMMON}/etc/.env"


DEFAULT_WITHOUT_TLS_ADDRESS=":1884"
DEFAULT_WITHOUT_TLS_TARGET="localhost:1883"

DEFAULT_WITH_TLS_ADDRESS=":8883"
DEFAULT_WITH_TLS_TARGET="localhost:1883"
DEFAULT_WITH_TLS_CERT_FILE=f"/home/omar/telem-agent/ssl/certs/server.crt"
DEFAULT_WITH_TLS_KEY_FILE=f"/home/omar/telem-agent/ssl/certs/server.key"
DEFAULT_WITH_TLS_SERVER_CA_FILE=f"/home/omar/telem-agent/ssl/certs/ca.crt"

DEFAULT_WITH_MTLS_ADDRESS=":8884"
DEFAULT_WITH_MTLS_TARGET="localhost:1883"
DEFAULT_WITH_MTLS_CERT_FILE=f"/home/omar/telem-agent/ssl/certs/server.crt"
DEFAULT_WITH_MTLS_KEY_FILE=f"/home/omar/telem-agent/ssl/certs/server.key"
DEFAULT_WITH_MTLS_SERVER_CA_FILE=f"/home/omar/telem-agent/ssl/certs/ca.crt"
DEFAULT_WITH_MTLS_CLIENT_CA_FILE=f"/home/omar/telem-agent/ssl/certs/ca.crt"
DEFAULT_WITH_MTLS_CERT_VERIFICATION_METHODS="ocsp"
DEFAULT_WITH_MTLS_OCSP_RESPONDER_URL="http://localhost:8080/ocsp"

DEFAULT_OTEL_ENABLE="false"
DEFAULT_OTEL_ENDPOINT="mqtt://localhost:1883"
DEFAULT_OTEL_PORT="9090"

# snapctl values
notls_tls_address=_snapctl("get", "notls.address")
notls_tls_target=_snapctl("get", "notls.target")

with_tls_address=_snapctl("get", "withtls.address")
with_tls_target=_snapctl("get", "withtls.target")
with_tls_cert_file=_snapctl("get", "withtls.cert")
with_tls_key_file=_snapctl("get", "withtls.key")
with_tls_server_ca_file=_snapctl("get", "withtls.serverca")

with_mtls_address=_snapctl("get", "withmtls.address")
with_mtls_target=_snapctl("get", "withmtls.target")
with_mtls_cert_file=_snapctl("get", "withmtls.cert")
with_mtls_key_file=_snapctl("get", "withmtls.key")
with_mtls_server_ca_file=_snapctl("get", "withmtls.serverca")
with_mtls_client_ca_file=_snapctl("get", "withmtls.clientca")
with_mtls_cert_verification_methods=_snapctl("get", "withmtls.verificiation")
with_mtls_ocsp_responder_url=_snapctl("get", "withmtls.ocsp")

otel_enabled=_snapctl("get", "otel.enabled")
otel_endpoint=_snapctl("get", "otel.endpoint")
otel_port=_snapctl("get", "otel.port")


notls_tls_address=set_defaults(notls_tls_address, DEFAULT_WITHOUT_TLS_ADDRESS)
notls_tls_target=set_defaults(notls_tls_target, DEFAULT_WITHOUT_TLS_TARGET)


with_tls_address=set_defaults(with_tls_address, DEFAULT_WITH_TLS_ADDRESS)
with_tls_target=set_defaults(with_tls_target, DEFAULT_WITH_TLS_TARGET)
with_tls_cert_file=set_defaults(with_tls_cert_file, DEFAULT_WITH_TLS_CERT_FILE)
with_tls_key_file=set_defaults(with_tls_key_file, DEFAULT_WITH_TLS_KEY_FILE)
with_tls_server_ca_file=set_defaults(with_tls_server_ca_file, DEFAULT_WITH_TLS_SERVER_CA_FILE)

with_mtls_address=set_defaults(with_mtls_address, DEFAULT_WITH_MTLS_ADDRESS)
with_mtls_target=set_defaults(with_mtls_target, DEFAULT_WITH_MTLS_TARGET)
with_mtls_cert_file=set_defaults(with_mtls_cert_file, DEFAULT_WITH_MTLS_CERT_FILE)
with_mtls_key_file=set_defaults(with_mtls_key_file, DEFAULT_WITH_MTLS_KEY_FILE)
with_mtls_server_ca_file=set_defaults(with_mtls_server_ca_file, DEFAULT_WITH_MTLS_SERVER_CA_FILE)
with_mtls_client_ca_file=set_defaults(with_mtls_client_ca_file, DEFAULT_WITH_MTLS_CLIENT_CA_FILE)
with_mtls_cert_verification_methods=set_defaults(with_mtls_cert_verification_methods, DEFAULT_WITH_MTLS_CERT_VERIFICATION_METHODS)
with_mtls_ocsp_responder_url=set_defaults(with_mtls_ocsp_responder_url, DEFAULT_WITH_MTLS_OCSP_RESPONDER_URL)

otel_enabled=set_defaults(otel_enabled, DEFAULT_OTEL_ENABLE)
otel_endpoint=set_defaults(otel_endpoint, DEFAULT_OTEL_ENDPOINT)
otel_port=set_defaults(otel_port, DEFAULT_OTEL_PORT)

with open(ENV_FILE, 'w') as writer:
    writer.write(f"MPROXY_MQTT_WITHOUT_TLS_ADDRESS=\"{notls_tls_address}\"\n")
    writer.write(f"MPROXY_MQTT_WITHOUT_TLS_TARGET=\"{notls_tls_target}\"\n")

    writer.write(f"MPROXY_MQTT_WITH_TLS_ADDRESS=\"{with_tls_address}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_TLS_TARGET=\"{with_tls_target}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_TLS_CERT_FILE=\"{with_tls_cert_file}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_TLS_KEY_FILE=\"{with_tls_key_file}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_TLS_SERVER_CA_FILE=\"{with_tls_server_ca_file}\"\n")

    writer.write(f"MPROXY_MQTT_WITH_MTLS_ADDRESS=\"{with_mtls_address}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_TARGET=\"{with_mtls_target}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_CERT_FILE=\"{with_mtls_cert_file}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_KEY_FILE=\"{with_mtls_key_file}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_SERVER_CA_FILE=\"{with_mtls_server_ca_file}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_CLIENT_CA_FILE=\"{with_mtls_client_ca_file}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_CERT_VERIFICATION_METHODS=\"{with_mtls_cert_verification_methods}\"\n")
    writer.write(f"MPROXY_MQTT_WITH_MTLS_OCSP_RESPONDER_URL=\"{with_mtls_ocsp_responder_url}\"\n")

    writer.write(f"OTEL_ENABLED=\"{otel_enabled}\"\n")
    writer.write(f"OTEL_ENDPOINT=\"{otel_endpoint}\"\n")
    writer.write(f"OTEL_PORT=\"{otel_port}\"\n")

_snapctl("restart", "telem-agent")